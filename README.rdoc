= Caesar - v0.3

A simple class for rapid DSL prototyping in Ruby.

== Installation

One of:

* copy lib/caesar.rb into your lib directory. 

Or for GitHub fans:

* git clone git://github.com/delano/caesar.git
* gem sources -a http://gems.github.com (you only have to do this once, ever...), then:
  * gem install delano-caesar

    
== Usage
    
    require 'caesar'
    
    # Subclass Caesar, then tell it which attributes have children using
    # Caesar.complex, also which attributes should store their blocks
    # rather than execute them and start drinking! I mean, start writing 
    # your domain specific language!
    
    class KitchenStaff < Caesar #:nodoc:
      complex :location
      complex :person
      blocked :calculate
    end
    
    extend KitchenStaff::DSL
    
    staff :fte do
      holidays 0
      location :splashdown do
        town :tsawwassen
        person :steve, :sheila do
          role :manager
        end
        person :steve do
          role :cook
          anger :high
          hours 25
          catchphrase "Rah! [strokes goatee]"
        end
        person :sheila do
          catchphrase "This gravy tastes like food I ate in a Mexican prison."
          hours rand(20)
          rate "9.35/h"
          calculate :salary do |gumption|
            "%.2f" % [gumption * self.splashdown.sheila.rate.to_f]
          end
        end
        person :delano do
          role :cook
          rate "8.35/h"
          hours 57
          satisfaction :low
          calculate :salary do 
            self.splashdown.delano.rate.to_f * self.splashdown.delano.hours
          end
        end
      end
    end
    
    # The instance you create with the DSL becomes available via an instance variable
    # in the same namespace. In this example we used "staff :fte" so the variable will be 
    # called @staff_fte. Had we used "team :awesome", it would have been @team_awesome.
    
    p @staff_fte.holidays           # => 0
    p @staff_fte.splashdown.delano  # => {:role=>:cook, :rate=>"$8.35/h", :satisfaction=>:low}
    p @staff_fte.splashdown.sheila  # => {:role=>:manager, :catchphrase=>"This gravy tastes like food I ate in a Mexican prison."}
    p @staff_fte.splashdown.steve   # => {:role=>[:manager, :cook], :anger=>:high, :catchphrase=>"Rah! [strokes goatee]"}
    p @staff_fte.location_values    # => [:splashdown]
    p @staff_fte.calculate_values   # => [:salary, :salary]
    p @staff_fte.person_values.uniq # => [:steve, :sheila, :delano, :angela]
    p @staff_fte.splashdown.delano.satisfaction            # => :low
    p @staff_fte.splashdown.delano.salary.call             # => 475.95
    p @staff_fte.splashdown.sheila.salary.call(rand(100))  # => 549.77
    

== Changes

* v0.3 (2009-03-04)
  * Initial public release


== More Info

* GitHub[http://github.com/delano/caesar]
* Inspiration[http://www.youtube.com/watch?v=ycElb0tB9_U]
* Recipe[http://twitter.com/solutious/status/1264327499]

== Credits

* Delano Mandelbaum (delano@solutious.com)

== Thanks

* Clams, Tomatoes, Vodka, and the rest of the crew. 

== License

See: LICENSE.txt